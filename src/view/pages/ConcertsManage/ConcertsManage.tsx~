import { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import type { AppDispatch, RootState } from "../../../store/store.ts";
import { getAllConcerts, saveConcert, deleteConcert, updateConcert } from "../../../slices/concertSlice.ts";
import { useNavigate } from "react-router-dom";

export function ConcertsManage() {
    const dispatch = useDispatch<AppDispatch>();
    const navigate = useNavigate();

    const { concertList } = useSelector((state: RootState) => state.concerts || {});

    const [role, setRole] = useState<string | null>(null);

    const [formData, setFormData] = useState({
        title: "",
        description: "",
        price: "",
        currency: "",
        venue: "",
        date: "",
        time: "",
    });

    const [selectedImageFile, setSelectedImageFile] = useState<File | null>(null);
    const [editingConcertId, setEditingConcertId] = useState<string | null>(null);
    const [existingImageBase64, setExistingImageBase64] = useState<string>(""); // For showing existing image

    useEffect(() => {
        dispatch(getAllConcerts());
        setRole(localStorage.getItem("role"));
    }, [dispatch]);

    const resetForm = () => {
        setEditingConcertId(null);
        setFormData({
            title: "",
            description: "",
            price: "",
            currency: "",
            venue: "",
            date: "",
            time: "",
        });
        setSelectedImageFile(null);
        setExistingImageBase64("");
    };

    const handleEdit = (concert: any) => {
        setEditingConcertId(concert.id);
        setFormData({
            title: concert.title,
            description: concert.description,
            price: String(concert.price),
            currency: concert.currency,
            venue: concert.venue,
            date: concert.date,
            time: concert.time,
        });
        setExistingImageBase64(concert.image || ""); // assuming concert.image has base64 or URL
        setSelectedImageFile(null);
    };

    const handleDeleteConcert = async (id: string) => {
        if (window.confirm("Are you sure you want to delete this concert?")) {
            try {
                await dispatch(deleteConcert(id));
                alert("Concert deleted successfully.");
                dispatch(getAllConcerts());
            } catch {
                alert("Failed to delete concert.");
            }
        }
    };

    const fileToBase64 = (file: File): Promise<string> =>
        new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result as string);
            reader.onerror = (error) => reject(error);
        });

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        let imageBase64 = existingImageBase64;

        if (selectedImageFile) {
            try {
                imageBase64 = await fileToBase64(selectedImageFile);
            } catch {
                alert("Failed to process image file.");
                return;
            }
        }

        const payload = {
            ...formData,
            price: Number(formData.price),
            image: imageBase64,
        };

        try {
            if (editingConcertId) {
                await dispatch(updateConcert({ id: editingConcertId, ...payload })).unwrap();
                alert("Concert updated successfully.");
            } else {
                await dispatch(saveConcert(payload)).unwrap();
                alert("Concert added successfully.");
            }
            dispatch(getAllConcerts());
            resetForm();
        } catch {
            alert("Failed to save concert.");
        }
    };

    if (role !== "organizer") {
        return (
            <div className="min-h-screen flex items-center justify-center text-red-500 font-bold text-xl">
                Access Denied. Only organizers can manage concerts.
            </div>
        );
    }

    return (
        <div className="max-w-6xl mx-auto bg-white shadow-2xl rounded-3xl p-10 pt-32 pb-16 space-y-10">
            <h2 className="text-3xl font-extrabold text-purple-900 text-center mb-6">
                🛠 {editingConcertId ? "Update Concert" : "Manage Your Concerts"}
            </h2>

            {/* Add/Edit Concert Form */}
            <form className="grid grid-cols-1 md:grid-cols-2 gap-8" onSubmit={handleSubmit}>
                {[
                    { name: "title", label: "Concert Title", type: "text", placeholder: "Exciting Concert" },
                    { name: "description", label: "Description", type: "text", placeholder: "Brief about concert" },
                    { name: "price", label: "Price", type: "number", placeholder: "100" },
                    { name: "currency", label: "Currency", type: "text", placeholder: "USD" },
                    { name: "venue", label: "Venue", type: "text", placeholder: "Concert Location" },
                    { name: "date", label: "Date", type: "date" },
                    { name: "time", label: "Time", type: "time" },
                ].map(({ name, label, type, placeholder }) => (
                    <div key={name} className="flex flex-col">
                        <label htmlFor={name} className="mb-2 font-semibold text-gray-700">
                            {label}
                        </label>
                        <input
                            id={name}
                            name={name}
                            type={type}
                            placeholder={placeholder}
                            value={formData[name]}
                            onChange={(e) => setFormData({ ...formData, [name]: e.target.value })}
                            required
                            className="border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                        />
                    </div>
                ))}

                {/* Image upload input */}
                <div className="flex flex-col">
                    <label htmlFor="image" className="mb-2 font-semibold text-gray-700">
                        Upload Image {editingConcertId && "(optional if not changing)"}
                    </label>
                    <input
                        id="image"
                        name="image"
                        type="file"
                        accept="image/*"
                        className="border border-gray-300 rounded-lg px-4 py-3 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition"
                        onChange={(e) => {
                            if (e.target.files && e.target.files[0]) {
                                setSelectedImageFile(e.target.files[0]);
                            }
                        }}
                    />
                    {/* Show preview if new image selected */}
                    {selectedImageFile && (
                        <img
                            src={URL.createObjectURL(selectedImageFile)}
                            alt="Selected"
                            className="mt-4 w-48 h-32 object-cover rounded-lg shadow-md"
                        />
                    )}
                    {/* Show existing image if editing and no new file chosen */}
                    {!selectedImageFile && existingImageBase64 && (
                        <img
                            src={existingImageBase64}
                            alt="Existing Concert"
                            className="mt-4 w-48 h-32 object-cover rounded-lg shadow-md"
                        />
                    )}
                </div>

                <div className="md:col-span-2 flex justify-center gap-4">
                    <button
                        type="submit"
                        className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white font-bold px-8 py-3 rounded-2xl shadow-lg transition-transform active:scale-95"
                    >
                        {editingConcertId ? "✅ Update Concert" : "🎯 Save Concert"}
                    </button>
                    {editingConcertId && (
                        <button
                            type="button"
                            onClick={resetForm}
                            className="bg-gray-300 hover:bg-gray-400 text-black font-semibold px-6 py-3 rounded-2xl shadow-md transition-transform active:scale-95"
                        >
                            Cancel
                        </button>
                    )}
                </div>
            </form>

            {/* Concerts List Table */}
            <h3 className="text-3xl font-bold mt-14 mb-8 text-purple-800 text-center">Concerts List</h3>

            {concertList.length > 0 ? (
                <div className="overflow-x-auto">
                    <table className="min-w-full bg-white border border-gray-200 rounded-xl shadow-md">
                        <thead className="bg-purple-100 text-purple-900">
                        <tr>
                            <th className="py-3 px-4 text-left">Image</th>
                            <th className="py-3 px-4 text-left">Title</th>
                            <th className="py-3 px-4 text-left">Description</th>
                            <th className="py-3 px-4 text-left">Date</th>
                            <th className="py-3 px-4 text-left">Time</th>
                            <th className="py-3 px-4 text-left">Venue</th>
                            <th className="py-3 px-4 text-left">Price</th>
                            <th className="py-3 px-4 text-left">Currency</th>
                            <th className="py-3 px-4 text-center">Actions</th>
                        </tr>
                        </thead>
                        <tbody className="text-gray-700">
                        {concertList.map((concert) => (
                            <tr
                                key={concert.id}
                                className="border-t border-gray-200 hover:bg-purple-50 transition"
                            >
                                <td className="py-3 px-4">
                                    {concert.image ? (
                                        <img
                                            src={concert.image}
                                            alt={concert.title}
                                            className="w-20 h-16 object-cover rounded-md shadow-sm"
                                        />
                                    ) : (
                                        <span className="text-gray-400 italic">No Image</span>
                                    )}
                                </td>
                                <td className="py-3 px-4">{concert.title}</td>
                                <td className="py-3 px-4 line-clamp-2 max-w-xs">{concert.description}</td>
                                <td className="py-3 px-4">{concert.date}</td>
                                <td className="py-3 px-4">{concert.time}</td>
                                <td className="py-3 px-4">{concert.venue}</td>
                                <td className="py-3 px-4">{concert.price}</td>
                                <td className="py-3 px-4">{concert.currency}</td>
                                <td className="py-3 px-4 text-center">
                                    <div className="flex justify-center gap-2">
                                        <button
                                            onClick={() => handleEdit(concert)}
                                            className="bg-yellow-400 hover:bg-yellow-500 text-white px-3 py-1 rounded-lg text-sm"
                                        >
                                            ✏️ Edit
                                        </button>
                                        <button
                                            onClick={() => handleDeleteConcert(concert.id)}
                                            className="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded-lg text-sm"
                                        >
                                            🗑 Delete
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            ) : (
                <p className="text-center text-gray-500 text-lg mt-8">No concerts available yet.</p>
            )}
        </div>
    );
}
